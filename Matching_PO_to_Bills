import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report

# Load purchase orders into a pandas DataFrame
purchase_orders = pd.read_csv('purchase_orders.csv')

# Load bills into a pandas DataFrame
bills = pd.read_csv('bills.csv')

# Perform data preprocessing if needed (e.g., handle missing values, adjust data types)

# Create a labeled dataset for training the classifier
purchase_orders['label'] = 1  # Mark purchase orders as 1 (matched)
bills['label'] = 0  # Mark bills as 0 (unmatched)
dataset = pd.concat([purchase_orders, bills], ignore_index=True)

# Select features for training the classifier
features = ['amount', 'vendor', 'item']  # Adjust the column names based on your data

# Split the dataset into features (X) and labels (y)
X = dataset[features]
y = dataset['label']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a random forest classifier
classifier = RandomForestClassifier()

# Train the classifier using the training data
classifier.fit(X_train, y_train)

# Make predictions on the test data
predictions = classifier.predict(X_test)

# Evaluate the classifier performance
classification_metrics = classification_report(y_test, predictions)

# Apply the classifier to match purchase orders to bills
purchase_orders['matched'] = classifier.predict(purchase_orders[features])

# Generate a matching report or output for further analysis or integration with the ERP accounting system
matching_report = pd.DataFrame({
    'Purchase Orders': purchase_orders,
    'Bills': bills,
    'Matching Status': purchase_orders['matched']
})

# Save the matching report to a file or integrate it into your ERP accounting system
matching_report.to_csv('matching_report.csv', index=False)
