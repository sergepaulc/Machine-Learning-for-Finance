import pandas as pd
import numpy as np
from sklearn.linear_model import TweedieRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Load cash flow data into a pandas DataFrame
data = pd.read_csv('cash_flow_data.csv')

# Preprocess the data if needed (e.g., handle missing values, adjust data types)

# Convert the date column to a datetime type
data['date'] = pd.to_datetime(data['date'])

# Set the date column as the index
data.set_index('date', inplace=True)

# Extract features and target variable
X = data.drop('cash_flow', axis=1)  # Adjust the column name according to your data
y = data['cash_flow']  # Adjust the column name according to your data

# Split the data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create a generalized linear model (TweedieRegressor)
model = TweedieRegressor(power=1, alpha=0.5, link='log')  # Adjust the parameters based on your data and requirements

# Train the model using the training data
model.fit(X_train, y_train)

# Make predictions on the test data
predictions = model.predict(X_test)

# Evaluate the model performance using mean squared error
mse = mean_squared_error(y_test, predictions)

# Once the model is trained and evaluated, you can use it to forecast cash flows for future periods
future_periods = 12  # Adjust the number of future periods to forecast
future_data = data.tail(12)  # Adjust the number of periods to use for forecasting
future_predictions = model.predict(future_data)

# Use the future_predictions for further analysis or integration into your ERP accounting system
